{% macro sbrt_definition( sbrt_role, ids_macro, actor_name, sbrt_data, code_parameters) -%}

    public void call_{{  sbrt_role | lower }} (
    {%- for argument in sbrt_data.arguments -%}
                    IDSDescription {{ argument.name }}_desc {%- if not loop.last or (code_parameters and sbrt_data.need_code_parameters) %}, {% endif%}
    {% endfor %}
    {% if code_parameters and sbrt_data.need_code_parameters %}
                    String codeParameters
    {% endif-%} ) throws Exception
    {
        final int IDS_ARGS_NO = {{ sbrt_data.arguments | selectattr("intent", "equalto", "OUT") | list | length }};
        Object[] retArray = null;
{% for argument in sbrt_data.arguments %}
    // IDS : {{ argument.name }} ------------------------
    {{ ids_macro.declare(argument) }}
{% endfor %}


    {% for argument in sbrt_data.arguments if argument.intent == 'IN' %}
    //--------- Get IDS : {{ argument.name }} ------------------------
    {{ ids_macro.get( argument.name) }}
    {% endfor %}


        // - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    retArray = this.wrapped_code.{{sbrt_data.name}}(
    {%- for argument in sbrt_data.arguments if argument.intent == 'IN' -%}
                    {{ argument.name }} {%- if not loop.last or (code_parameters and sbrt_data.need_code_parameters) %}, {% endif%}
    {% endfor %}
{% if code_parameters and sbrt_data.need_code_parameters%}
            codeParameters
{%-endif-%}
);
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Check retArray size vs IDS_ARGS_NO
    if (IDS_ARGS_NO > 0 && retArray == null)
        throw new Exception("{{actor_name}}/{{ sbrt_data.name }}: Returned array is NULL!" );

    int arraySize = retArray != null ? retArray.length : 0;

    if ( IDS_ARGS_NO != arraySize)
        throw new Exception("{{actor_name}}/{{ sbrt_data.name }}: Returned array size (" + arraySize + ") differs from the expected one (" + IDS_ARGS_NO + ")" );

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Get output variables from an array

{% for argument in sbrt_data.arguments if argument.intent == 'OUT' %}
     {{ argument.name }} = (imas.{{ argument.type }}) retArray[{{loop.index - 1 }}];
{% endfor %}

   // ------------ Provenance information --------------
{% for argument in sbrt_data.arguments if argument.intent == 'OUT' %}
    {{ ids_macro.provenance( argument.name , sbrt_name) }}
{% endfor %}

{% for argument in sbrt_data.arguments if argument.intent == 'OUT' %}
    //--------- PUT IDS : {{ argument.name }} ------------------------
    {{ ids_macro.put( argument.name) }}
{% endfor %}

}

{%- endmacro -%}


{% macro standalone_definition( sbrt_role, ids_macro, actor_name, sbrt_data, code_parameters) -%}

//======================================================================================================
//                        STANDALONE {{ sbrt_role | upper }}
//======================================================================================================
class Standalone4{{ actor_name }}_{{ sbrt_role }} {
    public static void main(String[] args)
    {
      Wrapper4{{actor_name}} wrapper = new  Wrapper4{{actor_name}}();
       final int IDS_ARGS_NO = {{ sbrt_data.arguments | length }};
       IDSDescription idsDescriptions[] = new IDSDescription[0];

        //----  Status info  ----
        int status_code = 0;
        String status_message = null;

        try{
            idsDescriptions = iWrapTools.read_input("{{ sbrt_role }}.in", IDS_ARGS_NO);

            {% if code_parameters and sbrt_data.need_code_parameters %}
            //----  Code parameters  ----
            String xml_string = iWrapTools.read_code_parameters();
            {% endif %}

            iWrapTools.open_db_entries(idsDescriptions);

            //!!!!!!!!! Java wrapper !!!!!!!!!!!!!!!
            wrapper.call_{{  sbrt_role | lower }}(
        {% for argument in sbrt_data.arguments %}
                        idsDescriptions[{{loop.index - 1 }}]{% if not loop.last or (code_parameters and sbrt_data.need_code_parameters) %}, {% endif%}
        {% endfor %}
        {% if code_parameters and sbrt_data.need_code_parameters%}
                        xml_string
        {% endif %});
           //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        } catch (Exception exc)
        {
            status_code = -1;
            status_message =  exc.getMessage();
            exc.printStackTrace();
        }

        iWrapTools.handle_status_info(status_code, status_message, "{{actor_name}}", "{{ sbrt_role | upper }}");

        iWrapTools.closeDBEntries(idsDescriptions);

        //-----------Writing output data to file ---------------------
        try{
            iWrapTools.write_output("{{ sbrt_role }}.out", status_code, status_message);
        }
        catch (Exception exc)
        {
            // No to much to do if an error code/msg cannot be passed to an actor :(
            exc.printStackTrace();
            System.exit(-1);
        }
    }
}
{%- endmacro -%}