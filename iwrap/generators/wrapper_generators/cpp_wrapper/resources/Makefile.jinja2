# actor name
ACTOR_NAME={{actor_description.actor_name}}


{% if code_description.settings.mpi_compiler_cmd   %}
CXX={{ code_description.settings.mpi_compiler_cmd }}

{% else %}
CXX={{ code_description.settings.compiler_cmd }}
{% endif %}


WRAPPER_DIR=$(dir $(realpath $(firstword $(MAKEFILE_LIST))))

OPENMPFLAG={{ code_description.settings.open_mp_switch or '' }}

CXXFLAGS= -g -fpic -pthread $(OPENMPFLAG)


CODE_LIB_FILE=$(notdir {{code_description.implementation.code_path}})
CODE_LIB_DEF=./lib/$(CODE_LIB_FILE)


# main IMAS libs to be used
CORE_LIBS_FLAGS= $(shell pkg-config --cflags imas-cpp)
CORE_LIBS=$(shell pkg-config --libs imas-cpp)

# required libs published using pkg-config mechanism
{% if code_description.settings.extra_libraries.pkg_config_defined %}
LIBS_PKGCONFIG_DEFINED_NAMES={{ (code_description.settings.extra_libraries.pkg_config_defined or []) | join(' ')}}
LIBS_PKGCONFIG_DEFINED_FLAGS=$(shell pkg-config --cflags $(LIBS_PKGCONFIG_DEFINED_NAMES))
LIBS_PKGCONFIG_DEFINED=$(shell pkg-config --libs $(LIBS_PKGCONFIG_DEFINED_NAMES))
{% else %}
LIBS_PKGCONFIG_DEFINED_NAMES=
LIBS_PKGCONFIG_DEFINED_FLAGS=
LIBS_PKGCONFIG_DEFINED=
{% endif %}


# required libs provided by user as a path
LIBS_PATH_DEFINED=
{%- for lib_path in code_description.settings.extra_libraries.path_defined or [] %}
 ./extra-libs/{{ lib_path | basename }}
{%- endfor %}

INCLUDES=-I./include $(CORE_LIBS_FLAGS) $(LIBS_PKGCONFIG_DEFINED_FLAGS)
LIBS=$(CORE_LIBS) $(LIBS_PKGCONFIG_DEFINED) $(LIBS_PATH_DEFINED)  $(CODE_LIB_DEF)


all:  ../lib/lib$(ACTOR_NAME).so  ../bin/$(ACTOR_NAME).exe

../bin/$(ACTOR_NAME).exe: src/standalone.cpp build/serialization_tools.o build/cpp_wrapper.o build/iwrap_tools.o
	@echo "   * $^ -> $@"
	@mkdir -p ../bin
	$(CXX) $(CXXFLAGS) $(INCLUDES) -o $@ -Wl,--start-group $^  $(LIBS) -Wl,--end-group  -Wl,-rpath,$(WRAPPER_DIR)/extra-libs/

../lib/lib$(ACTOR_NAME).so: build/cpp_wrapper.o build/serialization_tools.o build/iwrap_tools.o
	@echo "   * $^ -> $@"
	@mkdir -p ../lib
	$(CXX) $(CXXFLAGS) -shared -o $@  -Wl,--start-group $^  $(LIBS) -Wl,--end-group  -Wl,-rpath,$(WRAPPER_DIR)/extra-libs/

build/%.o: src/%.cpp
	@echo "   * $^ -> $@"
	@mkdir -p build
	$(CXX) $(CXXFLAGS) -c -w $^ -o $@  $(INCLUDES)

clean:
	-rm -f *.o build/* ../lib/*.so ../bin/*

