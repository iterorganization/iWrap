{% macro sbrt_declaration( sbrt_role, actor_name, sbrt_data, code_parameters) -%}
extern "C" void {{actor_name | lower}}_wrapper_{{  sbrt_role | lower }}(
{% for argument in sbrt_data.arguments %}
                ids_description_t* {{ argument.name }}_desc,
{% endfor %}
{% if code_parameters.parameters and sbrt_data.need_code_parameters %}
                int* code_params_len, char* code_params_str,
{% endif %}
                int* out_status_code, char** out_status_message);
{%- endmacro -%}


{% macro sbrt_definition( sbrt_role, ids_macro, actor_name, sbrt_data, code_parameters, mpi_compiler_cmd) -%}

extern "C" void {{actor_name | lower}}_wrapper_{{  sbrt_role | lower }}(
{% for argument in sbrt_data.arguments %}
                ids_description_t* {{ argument.name }}_desc,
{% endfor %}
{% if code_parameters.parameters and sbrt_data.need_code_parameters %}
               int* code_params_len, char* code_params_str,
{% endif %}
                int* out_status_code, char** out_status_message)
{
    std:string status_msg = "OK";

{% for argument in sbrt_data.arguments %}
    // IDS : {{ argument.name }} ------------------------
    {{ ids_macro.declare(argument.type, argument.name ) }}
{% endfor %}

{% if code_parameters.parameters and sbrt_data.need_code_parameters %}
    //----  Code parameters ----
    {% if 'legacy' in code_parameters.format %}
    IdsNs::codeparam_t imas_code_params;
    {% else %}
    std::string imas_code_params;
    {% endif %}
{% endif %}


    {% if mpi_compiler_cmd %}
    //----  MPI  ----
    int mpi_rank;
    int was_mpi_initialized, was_mpi_finalized;

    MPI_Initialized(&was_mpi_initialized);
    if (!was_mpi_initialized)
        MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);
{% endif %}


    {% for argument in sbrt_data.arguments if argument.intent == 'IN' %}
    //--------- Get IDS : {{ argument.name }} ------------------------
    {{ ids_macro.get( argument.name) }}
    {% endfor %}

    {% if code_parameters.parameters and sbrt_data.need_code_parameters  %}

        {% if 'legacy' in code_parameters.format %}
    // ------------------ code parameters ----------------------------
    imas_code_params.parameters = (char**)&(code_params_str);
    imas_code_params.default_param = NULL;
    imas_code_params.schema = NULL;
        {% else %}
    imas_code_params = code_params_str;
        {% endif %}
    {% endif %}

        // - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    {{sbrt_data.name}}(
{% for argument in sbrt_data.arguments %}
            {{ argument.name }},
{% endfor %}
{% if code_parameters.parameters  and sbrt_data.need_code_parameters%}
            imas_code_params,
{% endif %}
            *out_status_code, status_msg );
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        // converting status info
    convert_status_info(status_msg, out_status_message);

	if(*out_status_code < 0)
		return;
   {% if mpi_compiler_cmd %}
    if (mpi_rank == 0)
    {
       // --- called only for RANK 0 process

{% endif %}
   // ------------ Provenance information --------------
{% for argument in sbrt_data.arguments if argument.intent == 'OUT' %}
    {{ ids_macro.provenance( argument.name , sbrt_name, code_parameters) }}
{% endfor %}

{% for argument in sbrt_data.arguments if argument.intent == 'OUT' %}
    //--------- PUT IDS : {{ argument.name }} ------------------------
    {{ ids_macro.put( argument.name) }}
{% endfor %}
{% if mpi_compiler_cmd %}
    } //The end of section called only for RANK 0 process
{% endif %}

{% for argument in sbrt_data.arguments %}
    //--------- PUT IDS : {{ argument.name }} ------------------------
    {{ ids_macro.deallocate( argument.name) }}
{% endfor %}


{% if mpi_compiler_cmd %}
    //----  MPI Finalization ----
    MPI_Finalized(&was_mpi_finalized);
    if (!was_mpi_finalized)
       MPI_Finalize();
{% endif %}

}

{%- endmacro -%}


{% macro standalone_definition( sbrt_role, ids_macro, actor_name, sbrt_data, code_parameters, mpi_compiler_cmd) -%}

//======================================================================================================
//                        STANDALONE {{ sbrt_role | upper }}
//======================================================================================================
{% if mpi_compiler_cmd %}
#include <mpi.h>
{% endif %}
#include "iwrap_tools.h"
#include "cpp_wrapper.h"

int main(int argc, char **argv)
{
   const int IDS_ARGS_NO = {{sbrt_data.arguments | length}};
   ids_description_t db_entry_desc_array[IDS_ARGS_NO];
   IdsNs::IDS* *db_entry_array ;

    //----  Status info  ----
    int status_code = 0;
    char* status_message = NULL;

{% if mpi_compiler_cmd %}
    //----  MPI  ----
    int mpi_rank;
    int was_mpi_finalized, was_mpi_initialized;

    MPI_Initialized(&was_mpi_initialized);
    if (!was_mpi_initialized)
        MPI_Init(NULL, NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &mpi_rank);
{% endif %}

    read_input("{{ sbrt_role }}.in", db_entry_desc_array, IDS_ARGS_NO);

    {% if code_parameters.parameters and sbrt_data.need_code_parameters %}
    //----  Code parameters  ----
    char *xml_string;
    int code_parameters_len = -1;
    read_code_parameters( &xml_string);
    {% endif %}

    db_entry_array = open_db_entries(db_entry_desc_array, IDS_ARGS_NO);

    //!!!!!!!!! Cpp wrapper !!!!!!!!!!!!!!!
    {{actor_name | lower}}_wrapper_{{  sbrt_role | lower }}(
{% for argument in sbrt_data.arguments %}
                &db_entry_desc_array[{{loop.index - 1 }}],
{% endfor %}
{% if code_parameters.parameters and sbrt_data.need_code_parameters %}
                &code_parameters_len, xml_string,
{% endif %}
                &status_code, &status_message);
   //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


   {% if mpi_compiler_cmd %}
    if (mpi_rank == 0)
    {
       // --- called only for RANK 0 process
{% endif %}

    handle_status_info(status_code, status_message, "{{actor_name}}", "{{ sbrt_role | upper }}");

    //-----------Writing output data to file ---------------------
    write_output("{{ sbrt_role }}.out", status_code, status_message);


{% if mpi_compiler_cmd %}
    } //The end of section called only for RANK 0 process
{% endif %}
    close_db_entries(db_entry_array, IDS_ARGS_NO);

    {% if code_parameters.parameters and sbrt_data.need_code_parameters %}
    // ------Deallocating code parameters ----------------------------
    free(xml_string);
    {% endif %}

    release_status_info(status_message);

{% if mpi_compiler_cmd %}
    //----  MPI Finalization ----
    MPI_Finalized(&was_mpi_finalized);
    if (!was_mpi_finalized)
       MPI_Finalize();
{% endif %}
}
{%- endmacro -%}
