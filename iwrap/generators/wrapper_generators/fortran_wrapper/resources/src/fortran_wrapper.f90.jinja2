{% import './macros/%s_ids.jinja2' % code_description.implementation.data_type as ids_macro %}
{% import './macros/subroutines.jinja2' as sbrt_macro %}

module wrapper

{% if code_description.settings.mpi_compiler_cmd %}
    use mpi
{% endif %}
    use {{code_description.implementation.include_path | stemname}}
contains

        {% if code_description.implementation.subroutines.init %}
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE INIT SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    {{ sbrt_macro.sbrt_definition("init", ids_macro, actor_description.actor_name, code_description.implementation.subroutines.init, [],
    code_description.implementation.code_parameters.parameters, code_description.settings.mpi_compiler_cmd ) }}
{% endif %}

{% if code_description.implementation.subroutines.finalize %}
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE FINALIZE SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    {{ sbrt_macro.sbrt_definition("finalize", ids_macro, actor_description.actor_name, code_description.implementation.subroutines.finalize, [],
    None, code_description.settings.mpi_compiler_cmd ) }}
{% endif %}

! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE MAIN SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

{{ sbrt_macro.sbrt_definition("main", ids_macro, actor_description.actor_name, code_description.implementation.subroutines.main, code_description.arguments,
code_description.implementation.code_parameters.parameters, code_description.settings.mpi_compiler_cmd ) }}

        {% if code_description.implementation.subroutines.set_state %}
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE SET STATE SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SUBROUTINE {{actor_description.actor_name}}_wrapper_set_state(state_in, state_size, status_code, out_status_msg) BIND(C)
     use iwrap_tools

    !----  Status  ----

    integer :: state_size
    character(kind=C_CHAR), dimension(state_size), intent(in) :: state_in
    character(len=:), allocatable :: state_str

     !----  Diagnostic info  ----
  	 integer :: status_code

     type(C_PTR) :: out_status_msg
	 character(len=:), pointer :: status_msg


     !----  Initialize status info  ----
	 nullify(status_msg)
	 status_code = 0

    !----  ISO_C_BINDING -> Fortran conversions ----
    state_str = convert(state_in)

    ! - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    call  {{code_description.implementation.subroutines.set_state}}( state_str, status_code, status_msg)

    ! ------------ Output data conversion [ISO_C_BINDING] --------------
    out_status_msg = convert_string2Cptr(status_msg)


END SUBROUTINE {{actor_description.actor_name}}_wrapper_set_state
{% endif %}

{% if code_description.implementation.subroutines.get_state %}
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE SET STATE SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SUBROUTINE {{actor_description.actor_name}}_wrapper_get_state(state_out, status_code, out_status_msg) BIND(C)
     use iwrap_tools

     !----  Diagnostic info  ----
  	 integer :: status_code
     type(C_PTR) :: state_out
     character(len=:), allocatable :: state_str
     type(C_PTR) :: out_status_msg
	 character(len=:), pointer :: status_msg

     !----  Initialize status info  ----
	 nullify(status_msg)
	 status_code = 0

    ! - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    call  {{code_description.implementation.subroutines.get_state}}( state_str, status_code, status_msg)

    ! ------------ Output data conversion [ISO_C_BINDING] --------------
    out_status_msg = convert_string2Cptr(status_msg)
    state_out = convert_allocatable_string2c_ptr(state_str)


END SUBROUTINE {{actor_description.actor_name}}_wrapper_get_state
{% endif %}

{% if code_description.implementation.subroutines.get_timestamp %}
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!                                   NATIVE GET TIMESTAMP SBRT CALL
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SUBROUTINE {{actor_description.actor_name}}_wrapper_get_timestamp(timestamp_out, status_code, out_status_msg) BIND(C)
     use iwrap_tools

     integer,parameter :: DP=kind(1.0D0)
     real(kind=DP), intent(out) :: timestamp_out

     !----  Diagnostic info  ----
  	 integer :: status_code
     type(C_PTR) :: out_status_msg
	 character(len=:), pointer :: status_msg

     !----  Initialize status info  ----
	 nullify(status_msg)
	 status_code = 0

    ! - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    call  {{code_description.implementation.subroutines.get_timestamp}}( timestamp_out, status_code, status_msg)

    ! ------------ Output data conversion [ISO_C_BINDING] --------------
    out_status_msg = convert_string2Cptr(status_msg)


END SUBROUTINE {{actor_description.actor_name}}_wrapper_get_timestamp
{% endif %}

end module wrapper

! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


