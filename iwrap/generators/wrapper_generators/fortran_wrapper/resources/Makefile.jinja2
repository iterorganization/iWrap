# actor name
ACTOR_NAME={{actor_description.actor_name}}

FC={{ code_description.settings.compiler_cmd }}

MPIFC={{ code_description.settings.mpi_compiler_cmd or ''}}

WRAPPER_DIR=$(dir $(realpath $(firstword $(MAKEFILE_LIST))))

OPENMPFLAG={{ code_description.settings.open_mp_switch or '' }}

MOD_DIR=./build/

FFLAGS= -g -fPIC
#TO DO - any clever way to do this?
ifeq ($(FC), ifort)
# INTEL
  FFLAGS+=-module $(MOD_DIR)
else
# GFORTRAN
 FFLAGS+=-J$(MOD_DIR)
endif

FFLAGS+=$(OPENMPFLAG)
CODE_LIB_FILE=$(notdir {{code_description.implementation.code_path}})
CODE_LIB_DEF=./lib/$(CODE_LIB_FILE)

# main IMAS libs to be used
{% if build_info.al_version.startswith('4.')   %}
IMAS_LIB_NAME=imas-$(FC)
{% else %}
IMAS_LIB_NAME=al-fortran
{% endif %}

CORE_LIBS_FLAGS:= $(shell pkg-config --cflags "$(IMAS_LIB_NAME)")
CORE_LIBS:=$(shell pkg-config --libs "$(IMAS_LIB_NAME)")

# required libs published using pkg-config mechanism
{% if code_description.settings.extra_libraries.pkg_config_defined %}
LIBS_PKGCONFIG_DEFINED_NAMES={{ (code_description.settings.extra_libraries.pkg_config_defined or []) | join(' ')}}
LIBS_PKGCONFIG_DEFINED_FLAGS=$(shell pkg-config --cflags $(LIBS_PKGCONFIG_DEFINED_NAMES))
LIBS_PKGCONFIG_DEFINED=$(shell pkg-config --libs $(LIBS_PKGCONFIG_DEFINED_NAMES))
{% else %}
LIBS_PKGCONFIG_DEFINED_NAMES=
LIBS_PKGCONFIG_DEFINED_FLAGS=
LIBS_PKGCONFIG_DEFINED=
{% endif %}

# required libs provided by user as a path
LIBS_PATH_DEFINED=
{%- for lib_path in code_description.settings.extra_libraries.path_defined or [] %}
 ./extra-libs/{{ lib_path | basename }}
{%- endfor %}

INCLUDES=-I./include $(CORE_LIBS_FLAGS) $(LIBS_PKGCONFIG_DEFINED_FLAGS)
LIBS=$(CORE_LIBS) $(LIBS_PKGCONFIG_DEFINED) $(LIBS_PATH_DEFINED) $(CODE_LIB_DEF)

{% if code_description.settings.mpi_compiler_cmd   %}

# MPI compilation wrapper will be used
FC=$(MPIFC)
{% endif %}


all:
    {%- if code_description.implementation.subroutines.init %}
      ../bin/$(ACTOR_NAME)_init.exe  \
    {% endif %}
    {%- if code_description.implementation.subroutines.main %}
      ../bin/$(ACTOR_NAME)_main.exe  \
    {% endif %}
    {%- if code_description.implementation.subroutines.finalize %}
      ../bin/$(ACTOR_NAME)_finalize.exe  \
    {% endif %}
      ../lib/lib$(ACTOR_NAME).so

../bin/$(ACTOR_NAME)_%.exe: src/standalone_%.f90 build/defs.o build/RWTools.o  build/fortrantools.o build/fortran_wrapper.o
	@echo "   * $^ -> $@"
	@mkdir -p ../bin
	$(FC) $(FFLAGS) -o $@ -Wl,--start-group $^ $(INCLUDES) -I$(MOD_DIR) $(LIBS) -Wl,--end-group -Wl,-rpath,$(WRAPPER_DIR)/extra-libs/

build/%.o: src/%.f90
	@echo "  * $< -> $@"
	@mkdir -p ./build
	$(FC) $(FFLAGS) -c -w $^ -o $@  $(INCLUDES)

../lib/lib$(ACTOR_NAME).so: build/defs.o build/RWTools.o build/fortrantools.o build/fortran_wrapper.o
	@echo "   * $^ -> $@"
	@mkdir -p ../lib
	$(FC) $(FFLAGS) -shared -o $@ -Wl,--start-group $^ $(LIBS) -Wl,--end-group -Wl,-rpath,$(WRAPPER_DIR)/lib_ext/def/



clean:
	-rm -f *.o build/* ../lib/*.so ../bin/*
