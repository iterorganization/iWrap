program standalone

{% if code_description.language_specific.mpi %}
    use mpi
{% endif %}
    use iwrap_defs
    use iwrap_tools
    use wrapper

    implicit none

    !---------------------------------------------------------
    integer, parameter :: IDS_ARGS_NO = {{code_description.arguments | length}}
    type(ids_description_t), dimension(IDS_ARGS_NO) :: db_entry_desc_array
    integer :: status

    !----  Status info  ----
    type(status_t) :: status_info

{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
    !----  Code parameters  ----
    character(len=*), parameter :: PARAM_DIR = "../input/"
    character(len=*), parameter :: XML_FILE = "{{code_description.code_parameters.parameters.split('/')[-1]}}"
    character(len=*), parameter :: XSD_FILE = "{{code_description.code_parameters.schema.split('/')[-1]}}"
    type(code_parameters_t) :: code_params
{% endif %}

{% if code_description.language_specific.mpi %}
    !----  MPI  ----
    logical :: was_mpi_finalized
    integer :: process_rank
    call MPI_Init(status)
    call MPI_COMM_RANK(MPI_COMM_WORLD, process_rank, status)
{% endif %}


{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
    ! Read code parameters to structure
    code_params = read_codeparams(PARAM_DIR, XML_FILE, XSD_FILE)
{% endif %}



   !-----------Reading input ---------------------
    status = read_input(db_entry_desc_array)
    if (status /= 0) STOP -1

    !-----------Open DB entries---------------------
    call open_db_entries(db_entry_desc_array)

    !!!!!!!!! Fortran wrapper !!!!!!!!!!!!!!!
    call {{code_description.code_name}}_wrapper(&
{% for argument in code_description.arguments %}
                db_entry_desc_array({{loop.index}}),  &
{% endfor %}
{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
                code_params,  &
{% endif %}
                status_info)
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

{% if code_description.language_specific.mpi %}
    if (process_rank == 0) then
       ! --- called only for RANK 0 process
{% endif %}

    !-----------Check status info ---------------------
    call handle_status_info(status_info, "{{actor_settings.actor_name}}")

    !-----------Writing output data to file ---------------------
    call write_output(status_info)

{% if code_description.language_specific.mpi %}
    endif ! --- The end of section called only for RANK 0 process
{% endif %}
    !-----------Close DB entries---------------------
    call close_db_entries(db_entry_desc_array)


{% if code_description.language_specific.mpi %}
    !----  MPI Finalization ----
    call MPI_finalized(was_mpi_finalized, status)
    if (.not. was_mpi_finalized)   call MPI_Finalize(status)
{% endif %}

end program
