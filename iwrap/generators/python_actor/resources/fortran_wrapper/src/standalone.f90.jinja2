program standalone

    use iwrap_defs
    use iwrap_tools
    use wrapper

    implicit none

    !---------------------------------------------------------
    integer, parameter :: IDS_ARGS_NO = {{code_description.arguments | length}}
    type(ids_description_t), dimension(IDS_ARGS_NO) :: db_entry_desc_array
    integer :: status

    !----  Status info  ----
    type(status_t) :: status_info

{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
    !----  Code parameters  ----
    character(len=*), parameter :: PARAM_DIR = "../input/"
    character(len=*), parameter :: XML_FILE = "{{code_description.code_parameters.parameters.split('/')[-1]}}"
    character(len=*), parameter :: XSD_FILE = "{{code_description.code_parameters.schema.split('/')[-1]}}"
    type(code_parameters_t) :: code_params

    code_params = read_codeparams(PARAM_DIR, XML_FILE, XSD_FILE)
{% endif %}

   !-----------Reading input ---------------------
    status = read_input(db_entry_desc_array)
    if (status /= 0) STOP -1

    !-----------Open DB entries---------------------
    call open_db_entries(db_entry_desc_array)

    !!!!!!!!! Fortran wrapper !!!!!!!!!!!!!!!
    call {{code_description.code_name}}_wrapper(&
{% for argument in code_description.arguments %}
                db_entry_desc_array({{loop.index}}),  &
{% endfor %}
{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
                code_params,  &
{% endif %}
                status_info)
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    !-----------Check status info ---------------------
    call handle_status_info(status_info)

    !-----------Writing output data to file ---------------------
    call write_output(status_info)

    !-----------Close DB entries---------------------
    call close_db_entries(db_entry_desc_array)

end program
