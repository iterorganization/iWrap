module wrapper

contains

subroutine {{code_description.code_name}}_wrapper(&
{% for argument in code_description.arguments %}
                {{ argument.name }}_desc,  &
{% endfor %}
{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
                code_params,
{% endif %}
                status_info) BIND(C)

    use idsmodule
    use codeparam_module
    use status_module
    use ids_schemas
    use iwrap_tools
    use ids_routines
    use {{code_description.language_specific.include_path.split('/')[-1].replace('.mod','')}}


    implicit none

    character(132):: ids_full_name

{% for argument in code_description.arguments %}
    ! {{ argument.name }}
    type(idsstruct) :: {{ argument.name }}_desc
    type (ids_{{ argument.type }}) :: {{ argument.name }}
{% endfor %}

{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
	!----  Code parameters ----
    type(ids_parameters_input) :: imas_code_params
    type(code_parameters_t) :: code_params
{% endif %}

	 !----  Diagnostic info  ----
     type(status_t) :: status_info
	 character(len=:), pointer :: diagnosticInfo
	 integer :: wrap_out_outputFlag

    {% for argument in code_description.arguments if argument.intent == 'IN' %}
    !--------- Get IDS : {{ argument.name }} ------------------------
    ids_full_name = create_ids_full_name({{ argument.name }}_desc)
    call ids_get({{ argument.name }}_desc%idx, ids_full_name, {{ argument.name }})
    {% endfor %}

    {% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
    ! ------------------ code parameters ----------------------------
    imas_code_params = convert(code_params)
    {% endif %}

 
	! ------------- Input data conversion [ISO_C_BINDING] --------------

    ! - - - - - - - - - - - - - NATIVE CODE CALL - - - - - -- - - - - - - - - - - -
    call  {{code_description.code_name}}( &
{% for argument in code_description.arguments %}
            {{ argument.name }}, &
{% endfor %}
{% if code_description.code_parameters.parameters and code_description.code_parameters.schema %}
            imas_code_params,
{% endif %}
            wrap_out_outputFlag, diagnosticInfo)
    ! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    ! ------------ Output data conversion [ISO_C_BINDING] --------------
	 status_info.code = wrap_out_outputFlag
	 if(associated(diagnosticInfo)) then
		 status_info.message = convert_string2Cptr(diagnosticInfo)
   endif

	 ! Return in case of 'soft' crash (diagnostic info < 0)  
	 if(wrap_out_outputFlag < 0 ) then
		 return 
	 endif 

   ! ------------ Provenance information --------------
 {% for argument in code_description.arguments if argument.intent == 'OUT' %}
   if (associated({{ argument.name }}%code%name)) then
      deallocate({{ argument.name }}%code%name)
   endif
   if (associated({{ argument.name }}%code%version)) then
      deallocate({{ argument.name }}%code%version)
   endif
   allocate({{ argument.name }}%code%name(1))
   allocate({{ argument.name }}%code%version(1))
   {{ argument.name }}%code%name(1) = "{{code_description.code_name}}"
   {{ argument.name }}%code%version(1) = ""
    {% endfor %}

     {% for argument in code_description.arguments if argument.intent == 'OUT' %}
    !--------- PUT IDS : {{ argument.name }} ------------------------
    ids_full_name = create_ids_full_name({{ argument.name }}_desc)
    call ids_put({{ argument.name }}_desc%idx, ids_full_name, {{ argument.name }})
    {% endfor %}

    !--------- Dealloacting IDSes ------------------------
    {% for argument in code_description.arguments %}
    call ids_deallocate({{ argument.name }})
    {% endfor %}


end

end module wrapper
