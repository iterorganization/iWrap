# actor name
ACTOR_NAME={{actor_settings.actor_name}}

FC={{ code_description.language_specific.compiler_cmd }}
MPIFC={{ code_description.language_specific.mpi.mpi_compiler_cmd or ''}}

WRAPPER_DIR=$(dir $(realpath $(firstword $(MAKEFILE_LIST))))

OPENMPFLAG={{ code_description.language_specific.open_mp_switch or '' }}

MOD_DIR=./build/

#TO DO - any clever way to do this?
ifeq ($(FC), ifort)
# INTEL
  FLAGS=-g -fPIC -module $(MOD_DIR)
else
# GFORTRAN
 FLAGS=-g -fPIC -J$(MOD_DIR)
endif

FCLAGS=$(FLAGS) $(OPENMPFLAG)
CODE_LIB_FILE=$(notdir {{code_description.code_path}})
CODE_LIB_DEF=../lib/$(CODE_LIB_FILE)

# main IMAS libs to be used
CORE_LIBS_FLAGS:= $(shell pkg-config --cflags "imas-$(FC)" xmllib)
CORE_LIBS:=$(shell pkg-config --libs "imas-$(FC)" xmllib)

# required 'platform' libs (i.e. published using pkg-config mechanism)
{% if code_description.language_specific.system_libraries %}
PLATFORM_LIBS_NAMES={{ (code_description.language_specific.system_libraries or []) | join(' ')}}
PLATFORM_LIBS_FLAGS=$(shell pkg-config --cflags $(PLATFORM_LIBS_NAMES))
PLATFORM_LIBS=$(shell pkg-config --libs $(PLATFORM_LIBS_NAMES))
{% else %}
PLATFORM_LIBS_NAMES=
PLATFORM_LIBS_FLAGS=
PLATFORM_LIBS=
{% endif %}



# required 'custom' libs (i.e. provided by user as a pth to library)
CUSTOM_LIBS={{ (code_description.language_specific.custom_libraries or [] ) | join(' ')}}


INCLUDES=-I./include $(CORE_LIBS_FLAGS) $(PLATFORM_LIBS)
LIBS=$(CORE_LIBS) $(PLATFORM_LIBS) $(CUSTOM_LIBS) $(PLATFORM_LIBS_FLAGS) $(CODE_LIB_DEF)

{% if code_description.language_specific.mpi.mpi_compiler_cmd   %}
# MPI compilation wrapper will be used
FC=$(MPIFC)
{% endif %}


all: bin/$(ACTOR_NAME).exe   lib/lib$(ACTOR_NAME).so
#all: lib/lib$(ACTOR_NAME).so

bin/$(ACTOR_NAME).exe: src/standalone.f90 build/RWTools.o build/fortrantools.o build/fortran_wrapper.o
	@echo "   * $^ -> $@"
	@mkdir -p ./bin
	$(FC) $(FCLAGS) -o $@ -Wl,--start-group $^ $(INCLUDES) -I$(MOD_DIR) $(LIBS) -Wl,--end-group -Wl,-rpath,$(WRAPPER_DIR)/lib_ext/def/

build/defs.o: src/defs.f90
	@echo "  * $< -> $@"
	@mkdir -p ./build
	$(FC) $(FCLAGS) -c -w $^ -o $@  $(INCLUDES)

build/RWTools.o: src/RWTools.f90 build/defs.o
	@echo "  * $< -> $@"
	$(FC) $(FCLAGS) -c -w $^ -o $@  $(INCLUDES)

build/fortrantools.o: src/fortrantools.f90 build/defs.o
	@echo "  * $^ -> $@"
	$(FC) $(FCLAGS) -c -w $^ -o $@  $(INCLUDES)

lib/lib$(ACTOR_NAME).so: build/fortran_wrapper.o  build/RWTools.o build/fortrantools.o
	@echo "   * $^ -> $@"
	@mkdir -p ./lib
	$(FC) $(FCLAGS) -shared -o $@ -Wl,--start-group $^ $(LIBS) -Wl,--end-group -Wl,-rpath,$(WRAPPER_DIR)/lib_ext/def/

build/fortran_wrapper.o: src/fortran_wrapper.f90 build/fortrantools.o
	@echo "   * $< -> $@"
	$(FC) $(FCLAGS) -c -w $^ -o $@  $(INCLUDES)

clean:
	-rm -f *.o build/* lib/*.so bin/*
