############################################################
Python actor - reference architecture and implementation
############################################################

.. toctree::

.. _actor_layers_anchor:

Actor layers
#######################################################################################################################

+----------------------------+-------------------------+
| Programming language       |     Layer               |
+============================+=========================+
|                            |  Computational scenario |
|                            |  (aka *workflow*)       |
|                            +-------------------------+
| Workflow language          | Actor                   |
+           (Python)         +-------------------------+
|                            | Binder                  |
+----------------------------+                         |
|Physics model language      |                         |
| (C++, Fortran)             +-------------------------+
|                            | Wrapper                 |
|                            +-------------------------+
+                            | Native code             |
+----------------------------+-------------------------+

Scenario (aka workflow)
#######################################################################################################################

Computing scenario (aka workflow) is a directed graph, built with a set of components (actors) to execute given algorithm.
Python actors built by iWrap can be managed by a Python script provided by *workflow designer/developer*.
Such script:

* Prepares initial data of the workflow (e.g. reads IDSes, that will be processed)
* Creates and initialises all workflow items (actors)
* Executes actors
* Manages passing data from actor to actor
* Finalises all actors
* Saves results of computations

Please, use this link for :ref:`example of workflow implementation <workflow_example_anchor>`.

Actor layer
#######################################################################################################################

.. note::
   Please note that in this documentation the term ``actor`` usually means the whole component generated by iWrap.
   However in this section this term is limited to describe only its *the highest* layer!

The *actor layer* (implemented as Python class derived from abstract class ``Actor``)  resides on the top
of the actor stack.
This layer:

* Hides a complexity of underlying layers from the user
* Provides a well defined API, that can be called from workflow, used for:
  * Configuring how given actor will be run
  * Calling methods of the native code provided by the user from system library or binary executable
* Defines an actor logic


.. code-block:: python

 class Actor(ABC):

    @abstractmethod
    def initialize(self, runtime_settings: RuntimeSettings = None, code_parameters: CodeParameters = None) -> None:
        ...

    @abstractmethod
    def run(self, *args)->None:
        ...

    @abstractmethod
    def finalize(self) -> None:
        ...

.. warning::
   This component is automatically generated by iWrap and should be not changed by the user.

Binding layer
#######################################################################################################################

This layer, provides mechanism for 'binding' higher layers, implemented in a workflow programming language (Python) with
lower layers implemented in native code language (CPP/Fortran).

The binding layer, provides low level mechanism for:

* Calling native methods, provided by the user from system library, using Python ``ctypes`` module
* Launching a standalone executable in a separate system process
* Conversion of data (methods arguments) passed from higher layers to native code

**Example of Python ``Binder`` class API**

.. code-block:: python

 class Binder (ABC):

    @abstractmethod
    def initialize(self, actor) -> None:
        ...

    @abstractmethod
    def finalize(self) -> None:
        ...

    @abstractmethod
    def call_init(self, code_parameters: str, sandbox_dir: str, debug_mode=False) -> None:
        ...

    @abstractmethod
    def call_main(self, input_idses, code_parameters:str, sandbox_dir:str) -> None:
        ...

    @abstractmethod
    def call_finish(self, sandbox_dir: str) -> None:
        ...

    @abstractmethod
    def run_standalone(self, ids_list:List[Any], code_parameters:str, exec_command:str, sandbox_dir:str, output_stream) -> None:
        ...

.. warning::
   This component is automatically generated by iWrap and should be not changed by the user.

Wrapper
#######################################################################################################################

.. warning::
   This component is automatically generated by iWrap and should be not changed by the user.

Native code
#######################################################################################################################

    Native code
     A physics model, of standardised signature, provided by software developer

 /resources/native_code.rst
